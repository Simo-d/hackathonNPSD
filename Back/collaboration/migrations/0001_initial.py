# Generated by Django 4.2.7 on 2025-07-04 12:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('schedules', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('ACADEMIC', 'Académique'), ('SOCIAL', 'Social'), ('STUDY_SESSION', "Session d'étude"), ('WORKSHOP', 'Atelier'), ('CONFERENCE', 'Conférence'), ('CULTURAL', 'Culturel'), ('SPORTS', 'Sport'), ('OTHER', 'Autre')], max_length=15)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('location', models.CharField(max_length=200)),
                ('online_link', models.URLField(blank=True)),
                ('max_attendees', models.IntegerField(blank=True, null=True)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('DRAFT', 'Brouillon'), ('PUBLISHED', 'Publié'), ('CANCELLED', 'Annulé'), ('COMPLETED', 'Terminé')], default='DRAFT', max_length=15)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('cover_image', models.ImageField(blank=True, upload_to='events/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='Forum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('category', models.CharField(max_length=50)),
                ('is_public', models.BooleanField(default=True)),
                ('allowed_levels', models.JSONField(blank=True, default=list)),
                ('allowed_filieres', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('moderators', models.ManyToManyField(blank=True, related_name='moderated_forums', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ForumPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_solution', models.BooleanField(default=False)),
                ('is_edited', models.BooleanField(default=False)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True)),
                ('options', models.JSONField(default=list)),
                ('allows_multiple_choices', models.BooleanField(default=False)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=True)),
                ('target_levels', models.JSONField(blank=True, default=list)),
                ('target_filieres', models.JSONField(blank=True, default=list)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TipShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('category', models.CharField(choices=[('FOOD', 'Restauration'), ('HOUSING', 'Logement'), ('TRANSPORT', 'Transport'), ('BOOKS', 'Livres/Fournitures'), ('ENTERTAINMENT', 'Loisirs'), ('SERVICES', 'Services'), ('ACADEMIC', 'Académique'), ('OTHER', 'Autre')], max_length=15)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('valid_until', models.DateField(blank=True, null=True)),
                ('upvotes', models.PositiveIntegerField(default=0)),
                ('downvotes', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('is_verified', models.BooleanField(default=False)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_tips', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudySession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('session_type', models.CharField(choices=[('GROUP_STUDY', 'Étude en groupe'), ('TUTORING', 'Tutorat'), ('EXAM_PREP', 'Préparation examen'), ('PROJECT_WORK', 'Travail de projet'), ('HOMEWORK_HELP', 'Aide aux devoirs')], max_length=15)),
                ('datetime', models.DateTimeField()),
                ('duration', models.DurationField()),
                ('location', models.CharField(max_length=200)),
                ('online_link', models.URLField(blank=True)),
                ('max_participants', models.IntegerField(default=6)),
                ('topics', models.JSONField(blank=True, default=list)),
                ('resources', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedules.course')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_sessions', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='study_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='collaboration.forumpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('post', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('FORUM_REPLY', 'Réponse forum'), ('EVENT_REMINDER', 'Rappel événement'), ('STUDY_SESSION', "Session d'étude"), ('TIP_RESPONSE', 'Réponse à astuce'), ('POLL_CREATED', 'Nouveau sondage'), ('GROUP_INVITE', 'Invitation groupe'), ('SYSTEM', 'Système')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('link_url', models.URLField(blank=True)),
                ('link_text', models.CharField(blank=True, max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('is_important', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ForumTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('topic_type', models.CharField(choices=[('QUESTION', 'Question'), ('DISCUSSION', 'Discussion'), ('ANNOUNCEMENT', 'Annonce'), ('STUDY_GROUP', "Groupe d'étude"), ('RESOURCE', 'Ressource'), ('EVENT', 'Événement')], default='DISCUSSION', max_length=15)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('is_solved', models.BooleanField(default=False)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('forum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='collaboration.forum')),
            ],
            options={
                'ordering': ['-is_pinned', '-last_activity'],
            },
        ),
        migrations.AddField(
            model_name='forumpost',
            name='likes',
            field=models.ManyToManyField(related_name='liked_posts', through='collaboration.PostLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='forumpost',
            name='parent_post',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='collaboration.forumpost'),
        ),
        migrations.AddField(
            model_name='forumpost',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='collaboration.forumtopic'),
        ),
        migrations.CreateModel(
            name='EventAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('REGISTERED', 'Inscrit'), ('CONFIRMED', 'Confirmé'), ('ATTENDED', 'Présent'), ('ABSENT', 'Absent'), ('CANCELLED', 'Annulé')], default='REGISTERED', max_length=15)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='collaboration.event')),
            ],
            options={
                'unique_together': {('event', 'attendee')},
            },
        ),
        migrations.AddField(
            model_name='event',
            name='attendees',
            field=models.ManyToManyField(related_name='events', through='collaboration.EventAttendance', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='organizer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TipVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('UP', 'Upvote'), ('DOWN', 'Downvote')], max_length=4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='collaboration.tipshare')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('tip', 'user')},
            },
        ),
        migrations.CreateModel(
            name='PollVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_options', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='poll_votes', to='collaboration.poll')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('poll', 'voter')},
            },
        ),
    ]
