#!/usr/bin/env python
"""
Script de test pour v√©rifier que le backend fonctionne correctement
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smartcampus.settings')
django.setup()

from django.contrib.auth import get_user_model
from rest_framework.authtoken.models import Token
from accounts.models import Student, StudentProfile

def test_backend():
    print("üß™ Test du Backend SmartCampus")
    print("=" * 50)
    
    # Test 1: Mod√®les disponibles
    print("\n1. V√©rification des mod√®les...")
    try:
        user_count = Student.objects.count()
        print(f"‚úÖ Mod√®le Student: {user_count} utilisateurs")
        
        profile_count = StudentProfile.objects.count()
        print(f"‚úÖ Mod√®le StudentProfile: {profile_count} profils")
        
        token_count = Token.objects.count()
        print(f"‚úÖ Mod√®le Token: {token_count} tokens")
        
    except Exception as e:
        print(f"‚ùå Erreur mod√®les: {e}")
    
    # Test 2: Cr√©er un utilisateur test
    print("\n2. Test cr√©ation utilisateur...")
    try:
        # Supprimer l'utilisateur test s'il existe
        Student.objects.filter(username='test_user').delete()
        
        # Cr√©er un nouvel utilisateur
        user = Student.objects.create_user(
            username='test_user',
            email='test@example.com',
            password='testpass123',
            first_name='Test',
            last_name='User',
            student_id='TEST001',
            level='L1',
            filiere='INFO'
        )
        
        # Cr√©er le profil
        profile = StudentProfile.objects.create(
            student=user,
            enrollment_year=2024,
            expected_graduation=2027
        )
        
        # Cr√©er le token
        token = Token.objects.create(user=user)
        
        print(f"‚úÖ Utilisateur cr√©√©: {user.username}")
        print(f"‚úÖ Profil cr√©√©: ID {profile.id}")
        print(f"‚úÖ Token cr√©√©: {token.key[:10]}...")
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation utilisateur: {e}")
    
    # Test 3: Test des endpoints
    print("\n3. Test des URLs Django...")
    try:
        from django.urls import reverse
        
        # Test des URLs d'auth
        login_url = reverse('login')
        register_url = reverse('register')
        profile_url = reverse('profile')
        
        print(f"‚úÖ URL Login: {login_url}")
        print(f"‚úÖ URL Register: {register_url}")
        print(f"‚úÖ URL Profile: {profile_url}")
        
    except Exception as e:
        print(f"‚ùå Erreur URLs: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ Test termin√©! Le backend semble fonctionnel.")
    print("\nüìã √âtapes suivantes:")
    print("1. D√©marrer le serveur: python manage.py runserver")
    print("2. D√©marrer le frontend: cd Front && npm run dev")
    print("3. Tester la connexion sur http://localhost:5173")

if __name__ == '__main__':
    test_backend()
